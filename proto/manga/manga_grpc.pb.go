// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: manga/manga.proto

package manga

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MangaService_GetManga_FullMethodName          = "/manga.MangaService/GetManga"
	MangaService_GetAllMangas_FullMethodName      = "/manga.MangaService/GetAllMangas"
	MangaService_GetPopularMangas_FullMethodName  = "/manga.MangaService/GetPopularMangas"
	MangaService_GetFilteredMangas_FullMethodName = "/manga.MangaService/GetFilteredMangas"
)

// MangaServiceClient is the client API for MangaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MangaServiceClient interface {
	GetManga(ctx context.Context, in *MangaRequest, opts ...grpc.CallOption) (*MangaResponseWithChapters, error)
	GetAllMangas(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MangaListResponse, error)
	GetPopularMangas(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MangaListResponse, error)
	GetFilteredMangas(ctx context.Context, in *MangaFilterRequest, opts ...grpc.CallOption) (*MangaListResponse, error)
}

type mangaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMangaServiceClient(cc grpc.ClientConnInterface) MangaServiceClient {
	return &mangaServiceClient{cc}
}

func (c *mangaServiceClient) GetManga(ctx context.Context, in *MangaRequest, opts ...grpc.CallOption) (*MangaResponseWithChapters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MangaResponseWithChapters)
	err := c.cc.Invoke(ctx, MangaService_GetManga_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mangaServiceClient) GetAllMangas(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MangaListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MangaListResponse)
	err := c.cc.Invoke(ctx, MangaService_GetAllMangas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mangaServiceClient) GetPopularMangas(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MangaListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MangaListResponse)
	err := c.cc.Invoke(ctx, MangaService_GetPopularMangas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mangaServiceClient) GetFilteredMangas(ctx context.Context, in *MangaFilterRequest, opts ...grpc.CallOption) (*MangaListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MangaListResponse)
	err := c.cc.Invoke(ctx, MangaService_GetFilteredMangas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MangaServiceServer is the server API for MangaService service.
// All implementations must embed UnimplementedMangaServiceServer
// for forward compatibility.
type MangaServiceServer interface {
	GetManga(context.Context, *MangaRequest) (*MangaResponseWithChapters, error)
	GetAllMangas(context.Context, *emptypb.Empty) (*MangaListResponse, error)
	GetPopularMangas(context.Context, *emptypb.Empty) (*MangaListResponse, error)
	GetFilteredMangas(context.Context, *MangaFilterRequest) (*MangaListResponse, error)
	mustEmbedUnimplementedMangaServiceServer()
}

// UnimplementedMangaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMangaServiceServer struct{}

func (UnimplementedMangaServiceServer) GetManga(context.Context, *MangaRequest) (*MangaResponseWithChapters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManga not implemented")
}
func (UnimplementedMangaServiceServer) GetAllMangas(context.Context, *emptypb.Empty) (*MangaListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMangas not implemented")
}
func (UnimplementedMangaServiceServer) GetPopularMangas(context.Context, *emptypb.Empty) (*MangaListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPopularMangas not implemented")
}
func (UnimplementedMangaServiceServer) GetFilteredMangas(context.Context, *MangaFilterRequest) (*MangaListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredMangas not implemented")
}
func (UnimplementedMangaServiceServer) mustEmbedUnimplementedMangaServiceServer() {}
func (UnimplementedMangaServiceServer) testEmbeddedByValue()                      {}

// UnsafeMangaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MangaServiceServer will
// result in compilation errors.
type UnsafeMangaServiceServer interface {
	mustEmbedUnimplementedMangaServiceServer()
}

func RegisterMangaServiceServer(s grpc.ServiceRegistrar, srv MangaServiceServer) {
	// If the following call pancis, it indicates UnimplementedMangaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MangaService_ServiceDesc, srv)
}

func _MangaService_GetManga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MangaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MangaServiceServer).GetManga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MangaService_GetManga_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MangaServiceServer).GetManga(ctx, req.(*MangaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MangaService_GetAllMangas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MangaServiceServer).GetAllMangas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MangaService_GetAllMangas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MangaServiceServer).GetAllMangas(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MangaService_GetPopularMangas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MangaServiceServer).GetPopularMangas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MangaService_GetPopularMangas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MangaServiceServer).GetPopularMangas(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MangaService_GetFilteredMangas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MangaFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MangaServiceServer).GetFilteredMangas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MangaService_GetFilteredMangas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MangaServiceServer).GetFilteredMangas(ctx, req.(*MangaFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MangaService_ServiceDesc is the grpc.ServiceDesc for MangaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MangaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manga.MangaService",
	HandlerType: (*MangaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetManga",
			Handler:    _MangaService_GetManga_Handler,
		},
		{
			MethodName: "GetAllMangas",
			Handler:    _MangaService_GetAllMangas_Handler,
		},
		{
			MethodName: "GetPopularMangas",
			Handler:    _MangaService_GetPopularMangas_Handler,
		},
		{
			MethodName: "GetFilteredMangas",
			Handler:    _MangaService_GetFilteredMangas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manga/manga.proto",
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: anime.sql

package queries

import (
	"context"
)

const getMangaByName = `-- name: GetMangaByName :one
SELECT id, name, img, "imgHeader", describe, genres, author, country, published, "averageRating", "ratingCount", status, popularity FROM "Anime" WHERE name = $1
`

func (q *Queries) GetMangaByName(ctx context.Context, name string) (Anime, error) {
	row := q.db.QueryRow(ctx, getMangaByName, name)
	var i Anime
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Img,
		&i.ImgHeader,
		&i.Describe,
		&i.Genres,
		&i.Author,
		&i.Country,
		&i.Published,
		&i.AverageRating,
		&i.RatingCount,
		&i.Status,
		&i.Popularity,
	)
	return i, err
}

const listMangas = `-- name: ListMangas :many
SELECT id, name, img, "imgHeader", describe, genres, author, country, published, "averageRating", "ratingCount", status, popularity FROM "Anime"
`

func (q *Queries) ListMangas(ctx context.Context) ([]Anime, error) {
	rows, err := q.db.Query(ctx, listMangas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Anime
	for rows.Next() {
		var i Anime
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Img,
			&i.ImgHeader,
			&i.Describe,
			&i.Genres,
			&i.Author,
			&i.Country,
			&i.Published,
			&i.AverageRating,
			&i.RatingCount,
			&i.Status,
			&i.Popularity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPopularMangas = `-- name: ListPopularMangas :many
SELECT id, name, img, "imgHeader", describe, genres, author, country, published, "averageRating", "ratingCount", status, popularity FROM "Anime" ORDER BY "ratingCount" DESC LIMIT 14
`

func (q *Queries) ListPopularMangas(ctx context.Context) ([]Anime, error) {
	rows, err := q.db.Query(ctx, listPopularMangas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Anime
	for rows.Next() {
		var i Anime
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Img,
			&i.ImgHeader,
			&i.Describe,
			&i.Genres,
			&i.Author,
			&i.Country,
			&i.Published,
			&i.AverageRating,
			&i.RatingCount,
			&i.Status,
			&i.Popularity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimePopularity = `-- name: UpdateAnimePopularity :exec
UPDATE "Anime" SET "popularity" = "popularity" + 1 WHERE "name" = $1
`

func (q *Queries) UpdateAnimePopularity(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, updateAnimePopularity, name)
	return err
}

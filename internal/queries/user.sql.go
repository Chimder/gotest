// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package queries

import (
	"context"
)

const deleteUserByEmail = `-- name: DeleteUserByEmail :exec
DELETE FROM "User" WHERE "email" = $1
`

func (q *Queries) DeleteUserByEmail(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, deleteUserByEmail, email)
	return err
}

const getAnimeByNames = `-- name: GetAnimeByNames :many
SELECT id, name, img, "imgHeader", describe, genres, author, country, published, "averageRating", "ratingCount", status, popularity FROM "Anime" WHERE "name" = ANY($1::text[])
`

func (q *Queries) GetAnimeByNames(ctx context.Context, dollar_1 []string) ([]Anime, error) {
	rows, err := q.db.Query(ctx, getAnimeByNames, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Anime
	for rows.Next() {
		var i Anime
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Img,
			&i.ImgHeader,
			&i.Describe,
			&i.Genres,
			&i.Author,
			&i.Country,
			&i.Published,
			&i.AverageRating,
			&i.RatingCount,
			&i.Status,
			&i.Popularity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, image, favorite, "createdAt" FROM "User" WHERE "email" = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Image,
		&i.Favorite,
		&i.CreatedAt,
	)
	return i, err
}

const getUserFavoritesByEmail = `-- name: GetUserFavoritesByEmail :one
SELECT "favorite" FROM "User" WHERE "email" = $1
`

func (q *Queries) GetUserFavoritesByEmail(ctx context.Context, email string) ([]string, error) {
	row := q.db.QueryRow(ctx, getUserFavoritesByEmail, email)
	var favorite []string
	err := row.Scan(&favorite)
	return favorite, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO "User" (id, email, name, image)
VALUES ($1, $2, $3, $4)
RETURNING id, name, email, image, favorite, "createdAt"
`

type InsertUserParams struct {
	ID    string `db:"id" json:"id"`
	Email string `db:"email" json:"email"`
	Name  string `db:"name" json:"name"`
	Image string `db:"image" json:"image"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.Image,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Image,
		&i.Favorite,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserFavorites = `-- name: UpdateUserFavorites :exec
UPDATE "User" SET "favorite" = $1 WHERE "email" = $2
`

type UpdateUserFavoritesParams struct {
	Favorite []string `db:"favorite" json:"favorite"`
	Email    string   `db:"email" json:"email"`
}

func (q *Queries) UpdateUserFavorites(ctx context.Context, arg UpdateUserFavoritesParams) error {
	_, err := q.db.Exec(ctx, updateUserFavorites, arg.Favorite, arg.Email)
	return err
}
